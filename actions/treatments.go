package actions

import (
	"creaves/models"
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
	"time"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/nulls"
	"github.com/gobuffalo/pop/v6"
	"github.com/gobuffalo/validate/v3"
	"github.com/gobuffalo/x/responder"
	"github.com/gofrs/uuid"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Treatment)
// DB Table: Plural (treatments)
// Resource: Plural (Treatments)
// Path: Plural (/treatments)
// View Template Folder: Plural (/templates/treatments/)

// TreatmentsResource is the resource for the Treatment model
type TreatmentsResource struct {
	buffalo.Resource
}

// To handle schedule forms
type treatmentSchedule struct {
	ScheduleRequiredMorning nulls.Bool
	ScheduleRequiredNoon    nulls.Bool
	ScheduleRequiredEvening nulls.Bool
	ScheduleStatusMorning   nulls.Bool
	ScheduleStatusNoon      nulls.Bool
	ScheduleStatusEvening   nulls.Bool
}

func (t *treatmentSchedule) String() string {
	jt, _ := json.Marshal(t)
	return string(jt)
}

// TreatmentUpdateSchedule allow XHR update of treatment
func TreatmentUpdateSchedule(c buffalo.Context) error {
	updateRequest := struct {
		Treatment_ID uuid.UUID `json:"treatment_id"`
		Key          int       `json:"key"`
	}{}

	// Bind
	if err := c.Bind(&updateRequest); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	treatment := &models.Treatment{}
	if err := tx.Find(treatment, updateRequest.Treatment_ID); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	treatment.Timedonebitmap ^= updateRequest.Key

	if err := tx.Update(treatment); err != nil {
		return c.Error(http.StatusUnprocessableEntity, err)
	}

	updateRequest.Key = treatment.Timedonebitmap
	return c.Render(200, r.JSON(updateRequest))
}

// List gets all Treatments. This function is mapped to the path
// GET /treatments
func (v TreatmentsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	treatments := &models.Treatments{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Treatments from the DB
	if err := q.Eager().Order("date desc,timebitmap asc, animal_id desc").All(treatments); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("treatments", treatments)
		return c.Render(http.StatusOK, r.HTML("/treatments/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(treatments))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(treatments))
	}).Respond(c)
}

// Show gets the data for one Treatment. This function is mapped to
// the path GET /treatments/{treatment_id}
func (v TreatmentsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Treatment
	treatment := &models.Treatment{}

	// To find the Treatment the parameter treatment_id is used.
	if err := tx.Eager().Find(treatment, c.Param("treatment_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("treatment", treatment)

		return c.Render(http.StatusOK, r.HTML("/treatments/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(treatment))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(treatment))
	}).Respond(c)
}

// New renders the form for creating a new Treatment.
// This function is mapped to the path GET /treatments/new
func (v TreatmentsResource) New(c buffalo.Context) error {
	tc := &models.TreatmentTemplate{
		Dates:   time.Now().Format(models.DateFormat),
		Morning: true,
		Noon:    true,
		Evening: true,
	}
	c.Set("treatmentTemplate", tc)

	animalYearNumber := c.Param("animal_year_number")
	if len(animalYearNumber) > 0 {
		// Get the DB connection from the context
		tx, ok := c.Value("tx").(*pop.Connection)
		if !ok {
			return fmt.Errorf("no transaction found")
		}

		animal := &models.Animal{}
		errCode := http.StatusOK

		// for message
		data := map[string]interface{}{
			"animalID": animalYearNumber,
		}

		c.Logger().Debug("animalYearNumber:", animalYearNumber)
		matches := AnimalYearNumberRegEx.FindStringSubmatch(animalYearNumber)
		if matches == nil {
			return fmt.Errorf("invalid year number: %s", animalYearNumber)
		}
		c.Logger().Debug("animalYearNumber regex matches:", matches)
		q := tx.Where("yearNumber = ?", matches[1])
		if len(matches) == 4 && len(matches[3]) == 2 {
			q = q.Where("year = ?", fmt.Sprintf("20%s", matches[3]))
		}

		err := q.Order("ID desc").First(animal)
		if err != nil {
			c.Flash().Add("danger", T.Translate(c, "treatment.animal.not.found", data))
			errCode = http.StatusNotFound
		}
		if animal.OuttakeID.Valid {
			c.Flash().Add("danger", T.Translate(c, "treatment.animal.outtake.already.exist", data))
			errCode = http.StatusConflict
		}

		if errCode != http.StatusOK {
			return c.Render(errCode, r.HTML("/treatments/new.plush.html"))
		}

		if _, err := EnrichAnimal(animal, c); err != nil {
			return err
		}

		tc.Animal = animal
		tc.AnimalID = animal.ID
	}

	return c.Render(http.StatusOK, r.HTML("/treatments/new.plush.html"))
}

// Create adds a Treatment to the DB. This function is mapped to the
// path POST /treatments
func (v TreatmentsResource) Create(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Treatment
	treatments := []*models.Treatment{}
	treatmentTemplate := &models.TreatmentTemplate{}

	// Bind treatment to the html form elements
	if err := c.Bind(treatmentTemplate); err != nil {
		return err
	}
	treatmentTemplate.Animal = &models.Animal{}
	if err := tx.Find(treatmentTemplate.Animal, treatmentTemplate.AnimalID); err != nil {
		c.Logger().Errorf("Animal id %d not found for %v", treatmentTemplate.AnimalID, treatmentTemplate)
		return c.Render(http.StatusUnprocessableEntity, r.HTML("/treatments/new.plush.html"))
	}
	c.Logger().Debugf("Binded treatmentTemplate with %v", treatmentTemplate)

	bitmap := models.TreatmentBoolToBitmap(
		treatmentTemplate.Morning,
		treatmentTemplate.Noon,
		treatmentTemplate.Evening,
	)

	for _, d := range strings.Split(treatmentTemplate.Dates, ",") {
		date, err := time.Parse(models.DateFormat, strings.TrimSpace(d))
		if err != nil {
			return err
		}

		t := &models.Treatment{
			Date:           date,
			AnimalID:       treatmentTemplate.AnimalID,
			Drug:           treatmentTemplate.Drug,
			Dosage:         treatmentTemplate.Dosage,
			Remarks:        treatmentTemplate.Remarks,
			Timebitmap:     bitmap,
			Timedonebitmap: 0,
		}
		treatments = append(treatments, t)
	}

	c.Logger().Debugf("Treatments: %v", treatments)

	// Save all
	var verrs *validate.Errors
	var err error
	for _, treatment := range treatments {
		// Validate the data from the html form
		verrs, err = tx.ValidateAndCreate(treatment)
		if err != nil {
			return err
		}
		if verrs.HasAny() {
			break
		}
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Logger().Debug("Errors: %v", verrs)
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("treatmentTemplate", treatmentTemplate)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/treatments/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "treatment.created.success"))
		if len(c.Param("back")) > 0 {
			// and redirect to the show page
			return c.Redirect(http.StatusSeeOther, c.Param("back"))
		}
		// and redirect to the animal page
		return c.Redirect(http.StatusSeeOther, "/animals/%v/#nav-treatment", treatmentTemplate.AnimalID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(treatments))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(treatments))
	}).Respond(c)
}

// Edit renders a edit form for a Treatment. This function is
// mapped to the path GET /treatments/{treatment_id}/edit
func (v TreatmentsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Treatment
	treatment := &models.Treatment{}

	if err := tx.Eager().Find(treatment, c.Param("treatment_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if _, err := EnrichAnimal(treatment.Animal, c); err != nil {
		return err
	}

	c.Set("treatment", treatment)
	return c.Render(http.StatusOK, r.HTML("/treatments/edit.plush.html"))
}

// Update changes a Treatment in the DB. This function is mapped to
// the path PUT /treatments/{treatment_id}
func (v TreatmentsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Treatment
	treatment := &models.Treatment{}

	if err := tx.Find(treatment, c.Param("treatment_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Treatment to the html form elements
	if err := c.Bind(treatment); err != nil {
		return err
	}

	// Decode schedule
	ts := &treatmentSchedule{}
	if err := c.Bind(ts); err != nil {
		return err
	}
	treatment.SetAllScheduleRequired(
		ts.ScheduleRequiredMorning.Bool,
		ts.ScheduleRequiredNoon.Bool,
		ts.ScheduleRequiredEvening.Bool)

	treatment.SetAllScheduleStatus(
		ts.ScheduleStatusMorning.Bool,
		ts.ScheduleStatusNoon.Bool,
		ts.ScheduleStatusEvening.Bool)

	c.Logger().Debugf("Treatment Schedules: %v", ts)
	c.Logger().Debugf("Bitmaps: req:%d tod: %d", treatment.Timebitmap, treatment.Timedonebitmap)

	verrs, err := tx.ValidateAndUpdate(treatment)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("treatment", treatment)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/treatments/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "treatment.updated.success"))
		if len(c.Param("back")) > 0 {
			// and redirect to the show page
			return c.Redirect(http.StatusSeeOther, c.Param("back"))
		}
		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/treatments/%v", treatment.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(treatment))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(treatment))
	}).Respond(c)
}

// Destroy deletes a Treatment from the DB. This function is mapped
// to the path DELETE /treatments/{treatment_id}
func (v TreatmentsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Treatment
	treatment := &models.Treatment{}

	// To find the Treatment the parameter treatment_id is used.
	if err := tx.Find(treatment, c.Param("treatment_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(treatment); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "treatment.destroyed.success"))
		if len(c.Param("back")) > 0 {
			// and redirect to the show page
			return c.Redirect(http.StatusSeeOther, c.Param("back"))
		}
		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/treatments")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(treatment))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(treatment))
	}).Respond(c)
}
