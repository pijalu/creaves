package actions

import (
	"creaves/models"
	"fmt"
	"net/http"
	"sort"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v5"
	"github.com/gobuffalo/x/responder"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Drug)
// DB Table: Plural (drugs)
// Resource: Plural (Drugs)
// Path: Plural (/drugs)
// View Template Folder: Plural (/templates/drugs/)

// DrugsResource is the resource for the Drug model
type DrugsResource struct {
	buffalo.Resource
}

func (v DrugsResource) setContext(c buffalo.Context) error {
	at, err := animalTypes(c)
	if err != nil {
		return err
	}
	c.Set("AnimalTypes", at)
	return nil
}

func enrichDrug(drug *models.Drug, c buffalo.Context) error {
	// Preload all animalTypes
	ats, err := animalTypes(c)
	if err != nil {
		return err
	}
	mats := ats.AsMap()
	// add animal types
	for i := 0; i < len(drug.Dosages); i++ {
		var t models.Animaltype = mats[drug.Dosages[i].AnimaltypeID]
		drug.Dosages[i].Animaltype = &t
		delete(mats, t.ID)
	}

	// Add empty entries if needed
	for _, v := range mats {
		drug.Dosages = append(drug.Dosages, models.Dosage{
			AnimaltypeID: v.ID,
			Animaltype:   &v,
			Enabled:      false,
			DrugID:       drug.ID,
			Drug:         drug,
		})
	}
	// Sort
	sort.Slice(drug.Dosages, func(i, j int) bool {
		n1 := drug.Dosages[i].Animaltype.Name
		n2 := drug.Dosages[j].Animaltype.Name

		return n1 < n2
	})

	return nil
}

// List gets all Drugs. This function is mapped to the path
// GET /drugs
func (v DrugsResource) List(c buffalo.Context) error {
	// Admin only
	if !GetCurrentUser(c).Admin {
		return c.Error(http.StatusForbidden, fmt.Errorf("restricted"))
	}
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	drugs := &models.Drugs{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Drugs from the DB
	if err := q.Order("name asc").All(drugs); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("drugs", drugs)
		return c.Render(http.StatusOK, r.HTML("/drugs/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(drugs))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(drugs))
	}).Respond(c)
}

// Show gets the data for one Drug. This function is mapped to
// the path GET /drugs/{drug_id}
func (v DrugsResource) Show(c buffalo.Context) error {
	// Admin only
	if !GetCurrentUser(c).Admin {
		return c.Error(http.StatusForbidden, fmt.Errorf("restricted"))
	}
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Drug
	drug := &models.Drug{}

	// To find the Drug the parameter drug_id is used.
	if err := tx.Eager().Find(drug, c.Param("drug_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}
	if err := enrichDrug(drug, c); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("drug", drug)

		return c.Render(http.StatusOK, r.HTML("/drugs/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(drug))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(drug))
	}).Respond(c)
}

// New renders the form for creating a new Drug.
// This function is mapped to the path GET /drugs/new
func (v DrugsResource) New(c buffalo.Context) error {
	// Admin only
	if !GetCurrentUser(c).Admin {
		return c.Error(http.StatusForbidden, fmt.Errorf("restricted"))
	}

	if err := v.setContext(c); err != nil {
		return err
	}

	drug := &models.Drug{}
	if err := enrichDrug(drug, c); err != nil {
		return err
	}

	c.Set("drug", drug)
	return c.Render(http.StatusOK, r.HTML("/drugs/new.plush.html"))
}

// Create adds a Drug to the DB. This function is mapped to the
// path POST /drugs
func (v DrugsResource) Create(c buffalo.Context) error {
	// Admin only
	if !GetCurrentUser(c).Admin {
		return c.Error(http.StatusForbidden, fmt.Errorf("restricted"))
	}

	// Allocate an empty Drug
	drug := &models.Drug{}

	// Bind drug to the html form elements
	if err := c.Bind(drug); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(drug)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("drug", drug)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/drugs/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "drug.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/drugs/%v", drug.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(drug))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(drug))
	}).Respond(c)
}

// Edit renders a edit form for a Drug. This function is
// mapped to the path GET /drugs/{drug_id}/edit
func (v DrugsResource) Edit(c buffalo.Context) error {
	// Admin only
	if !GetCurrentUser(c).Admin {
		return c.Error(http.StatusForbidden, fmt.Errorf("restricted"))
	}

	if err := v.setContext(c); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Drug
	drug := &models.Drug{}

	if err := tx.Eager().Find(drug, c.Param("drug_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := enrichDrug(drug, c); err != nil {
		return err
	}

	c.Set("drug", drug)
	return c.Render(http.StatusOK, r.HTML("/drugs/edit.plush.html"))
}

// Update changes a Drug in the DB. This function is mapped to
// the path PUT /drugs/{drug_id}
func (v DrugsResource) Update(c buffalo.Context) error {
	// Admin only
	if !GetCurrentUser(c).Admin {
		return c.Error(http.StatusForbidden, fmt.Errorf("restricted"))
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Drug
	drug := &models.Drug{}

	if err := tx.Eager().Find(drug, c.Param("drug_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Drug to the html form elements
	if err := c.Bind(drug); err != nil {
		return err
	}

	verrs, err := tx.Eager().ValidateAndUpdate(drug)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("drug", drug)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/drugs/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "drug.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/drugs/%v", drug.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(drug))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(drug))
	}).Respond(c)
}

// Destroy deletes a Drug from the DB. This function is mapped
// to the path DELETE /drugs/{drug_id}
func (v DrugsResource) Destroy(c buffalo.Context) error {
	// Admin only
	if !GetCurrentUser(c).Admin {
		return c.Error(http.StatusForbidden, fmt.Errorf("restricted"))
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Drug
	drug := &models.Drug{}

	// To find the Drug the parameter drug_id is used.
	if err := tx.Eager().Find(drug, c.Param("drug_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Eager().Destroy(drug); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "drug.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/drugs")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(drug))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(drug))
	}).Respond(c)
}
