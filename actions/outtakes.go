package actions

import (
	"creaves/models"
	"fmt"
	"net/http"
	"time"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/nulls"
	"github.com/gobuffalo/pop/v5"
	"github.com/gobuffalo/x/responder"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Outtake)
// DB Table: Plural (outtakes)
// Resource: Plural (Outtakes)
// Path: Plural (/outtakes)
// View Template Folder: Plural (/templates/outtakes/)

// OuttakesResource is the resource for the Outtake model
type OuttakesResource struct {
	buffalo.Resource
}

// List gets all Outtakes. This function is mapped to the path
// GET /outtakes
func (v OuttakesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	outtakes := &models.Outtakes{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.Eager().PaginateFromParams(c.Params())

	// Retrieve all Outtakes from the DB
	if err := q.All(outtakes); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("outtakes", outtakes)
		return c.Render(http.StatusOK, r.HTML("/outtakes/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(outtakes))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(outtakes))
	}).Respond(c)
}

// Show gets the data for one Outtake. This function is mapped to
// the path GET /outtakes/{outtake_id}
func (v OuttakesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Outtake
	outtake := &models.Outtake{}

	// To find the Outtake the parameter outtake_id is used.
	if err := tx.Eager().Find(outtake, c.Param("outtake_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("outtake", outtake)

		return c.Render(http.StatusOK, r.HTML("/outtakes/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(outtake))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(outtake))
	}).Respond(c)
}

// New renders the form for creating a new Outtake.
// This function is mapped to the path GET /outtakes/new
func (v OuttakesResource) New(c buffalo.Context) error {
	outtake := &models.Outtake{
		Date: time.Now(),
	}
	c.Set("outtake", outtake)

	// Set outtake type
	ot, err := outtakeTypes(c)
	if err != nil {
		return err
	}
	c.Set("selectOuttaketype", outtakeTypesToSelectables(ot))

	animalID := c.Param("animal_id")
	if len(animalID) > 0 {
		// Get the DB connection from the context
		tx, ok := c.Value("tx").(*pop.Connection)
		if !ok {
			return fmt.Errorf("no transaction found")
		}

		animal := &models.Animal{}
		errCode := http.StatusOK

		// for message
		data := map[string]interface{}{
			"animalID": animalID,
		}

		if err := tx.Eager().Find(animal, animalID); err != nil {
			c.Flash().Add("danger", T.Translate(c, "outtake.animal.not.found", data))
			errCode = http.StatusNotFound
		}

		c.Logger().Debugf("Loaded animal %v", animal)

		if animal.Outtake != nil {
			c.Flash().Add("danger", T.Translate(c, "outtake.animal.outtake.already.exist", data))
			errCode = http.StatusConflict
		}
		if errCode != http.StatusOK {
			return c.Render(errCode, r.HTML("/outtakes/new.plush.html"))
		}
		animal.Outtake = outtake
		c.Set("animal", animal)
	}

	return c.Render(http.StatusOK, r.HTML("/outtakes/new.plush.html"))
}

// Create adds a Outtake to the DB. This function is mapped to the
// path POST /outtakes
func (v OuttakesResource) Create(c buffalo.Context) error {
	// Allocate an empty Outtake
	outtake := &models.Outtake{}

	// Bind outtake to the html form elements
	if err := c.Bind(outtake); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	animalID := c.Param("animal_id")
	if len(animalID) <= 0 {
		return fmt.Errorf("Missing animal ID")
	}
	animal := &models.Animal{}
	if err := tx.Eager().Find(animal, animalID); err != nil {
		// cannot link animal
		return c.Render(http.StatusNotFound, r.HTML("/outtakes/new.plush.html"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(outtake)
	if err != nil {
		return err
	}
	// Update animal if outtake is saved
	if !verrs.HasAny() {
		animal.OuttakeID = nulls.NewUUID(outtake.ID)
		animal.Outtake = outtake
		if err := tx.Update(animal); err != nil {
			return err
		}
		c.Logger().Debugf("Updated animal: %v", animal)
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("outtake", outtake)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/outtakes/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "outtake.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/outtakes/%v", outtake.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(outtake))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(outtake))
	}).Respond(c)
}

// Edit renders a edit form for a Outtake. This function is
// mapped to the path GET /outtakes/{outtake_id}/edit
func (v OuttakesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Outtake
	outtake := &models.Outtake{}

	if err := tx.Eager().Find(outtake, c.Param("outtake_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}
	c.Set("outtake", outtake)

	// Set outtake type
	ot, err := outtakeTypes(c)
	if err != nil {
		return err
	}
	c.Set("selectOuttaketype", outtakeTypesToSelectables(ot))

	return c.Render(http.StatusOK, r.HTML("/outtakes/edit.plush.html"))
}

// Update changes a Outtake in the DB. This function is mapped to
// the path PUT /outtakes/{outtake_id}
func (v OuttakesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Outtake
	outtake := &models.Outtake{}

	if err := tx.Eager().Find(outtake, c.Param("outtake_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Outtake to the html form elements
	if err := c.Bind(outtake); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(outtake)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("outtake", outtake)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/outtakes/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "outtake.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/outtakes/%v", outtake.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(outtake))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(outtake))
	}).Respond(c)
}

// Destroy deletes a Outtake from the DB. This function is mapped
// to the path DELETE /outtakes/{outtake_id}
func (v OuttakesResource) Destroy(c buffalo.Context) error {
	// Admin only
	if !GetCurrentUser(c).Admin {
		return c.Error(http.StatusForbidden, fmt.Errorf("restricted"))
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Outtake
	outtake := &models.Outtake{}

	// To find the Outtake the parameter outtake_id is used.
	if err := tx.Eager().Find(outtake, c.Param("outtake_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(outtake); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "outtake.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/outtakes")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(outtake))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(outtake))
	}).Respond(c)
}
